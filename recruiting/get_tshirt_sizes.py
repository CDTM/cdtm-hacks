#!/usr/bin/env python3
"""
Extract t-shirt sizes for confirmed participants from the application data.

This script takes two inputs:
1. A CSV file with confirmed participant emails (generated by number_of_confirmations.py)
2. The original application CSV file from Formbricks

It outputs a new CSV file with email addresses and corresponding t-shirt sizes.

Example usage:
python3 get_tshirt_sizes.py confirmed_participants.csv applications.csv -o tshirt_sizes.csv
"""

import argparse
import csv
import sys
from pathlib import Path


def extract_tshirt_sizes(confirmed_emails_path: Path, applications_path: Path, output_path: Path) -> None:
    """Extract t-shirt sizes for confirmed participants.
    
    Args:
        confirmed_emails_path: Path to CSV file with confirmed participant emails
        applications_path: Path to the original application CSV file
        output_path: Path to save the output CSV with email and t-shirt size
    """
    # Read confirmed emails
    confirmed_emails = set()
    with confirmed_emails_path.open(newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            confirmed_emails.add(row["email"].strip().lower())

    # Process applications and extract t-shirt sizes
    email_to_tshirt = {}
    size_counts = {}  # Dictionary to count t-shirt sizes
    with applications_path.open(newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        
        # Verify required columns exist
        required_columns = {"1. Welcome to the CDTM Hacks Application!", "21. T-Shirt Size", "Finished"}
        missing_columns = required_columns - set(reader.fieldnames)
        if missing_columns:
            raise KeyError(
                f"Required columns not found: {missing_columns}. Columns present: {reader.fieldnames}"
            )

        for row in reader:
            # Skip incomplete applications
            if row["Finished"] != "Yes":
                continue

            # Extract email from the welcome message column
            welcome_msg = row["1. Welcome to the CDTM Hacks Application!"]
            if not welcome_msg:
                continue
                
            # Extract email from the welcome message (format: "Name, Surname, email@example.com")
            try:
                email = welcome_msg.split(",")[-1].strip().lower()
            except IndexError:
                continue

            if email in confirmed_emails:
                tshirt_size = row["21. T-Shirt Size"].strip()
                email_to_tshirt[email] = tshirt_size
                # Count the size
                size_counts[tshirt_size] = size_counts.get(tshirt_size, 0) + 1

    # Write output CSV
    with output_path.open("w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["email", "tshirt_size"])
        for email in sorted(email_to_tshirt.keys()):
            writer.writerow([email, email_to_tshirt[email]])

    # Print summary
    print(f"Processed {len(confirmed_emails)} confirmed participants")
    print(f"Found t-shirt sizes for {len(email_to_tshirt)} participants")
    if len(confirmed_emails) != len(email_to_tshirt):
        print(f"Warning: Could not find t-shirt sizes for {len(confirmed_emails) - len(email_to_tshirt)} participants")
        missing_emails = confirmed_emails - set(email_to_tshirt.keys())
        print("Missing emails:")
        for email in sorted(missing_emails):
            print(f"  - {email}")
    
    # Print size distribution table
    print("\nT-shirt size distribution:")
    size_order = ["XS", "S", "M", "L", "XL"]
    for size in size_order:
        if size in size_counts:
            print(f"{size}: {size_counts[size]}")
    # Handle empty size string
    empty_count = size_counts.get("", 0)
    if empty_count > 0:
        print(f"No t-shirt size available: {empty_count}")


def parse_args():
    parser = argparse.ArgumentParser(
        description="Extract t-shirt sizes for confirmed participants from application data"
    )
    parser.add_argument(
        "confirmed_emails",
        type=Path,
        help="Path to CSV file with confirmed participant emails",
    )
    parser.add_argument(
        "applications",
        type=Path,
        help="Path to the original application CSV file from Formbricks",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=Path,
        help="Path to save the output CSV with email and t-shirt size",
        default="tshirt_sizes.csv"
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    try:
        extract_tshirt_sizes(args.confirmed_emails, args.applications, args.output)
        print(f"T-shirt sizes saved to: {args.output}")
    except FileNotFoundError as e:
        sys.exit(f"File not found: {e}")
    except Exception as exc:
        sys.exit(f"Error: {exc}") 