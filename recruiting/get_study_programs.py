#!/usr/bin/env python3
"""
Extract study programs for confirmed participants from the application data.

This script takes two inputs:
1. A CSV file with confirmed participant emails (generated by number_of_confirmations.py)
2. The original application CSV file from Formbricks

It outputs a new CSV file with email addresses and corresponding study programs.

Example usage:
python3 get_study_programs.py confirmed_participants.csv applications.csv -o study_programs.csv
"""

import argparse
import csv
import sys
from pathlib import Path


def extract_study_programs(confirmed_emails_path: Path, applications_path: Path, output_path: Path) -> None:
    """Extract study programs for confirmed participants.
    
    Args:
        confirmed_emails_path: Path to CSV file with confirmed participant emails
        applications_path: Path to the original application CSV file
        output_path: Path to save the output CSV with email and study program
    """
    # Read confirmed emails
    confirmed_emails = set()
    with confirmed_emails_path.open(newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            confirmed_emails.add(row["email"].strip().lower())

    # Process applications and extract study programs
    email_to_program = {}
    program_counts = {}  # Dictionary to count study programs
    with applications_path.open(newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        
        # Verify required columns exist
        required_columns = {"1. Welcome to the CDTM Hacks Application!", "12. Study program", "Finished"}
        missing_columns = required_columns - set(reader.fieldnames)
        if missing_columns:
            raise KeyError(
                f"Required columns not found: {missing_columns}. Columns present: {reader.fieldnames}"
            )

        for row in reader:
            # Skip incomplete applications
            if row["Finished"] != "Yes":
                continue

            # Extract email from the welcome message column
            welcome_msg = row["1. Welcome to the CDTM Hacks Application!"]
            if not welcome_msg:
                continue
                
            # Extract email from the welcome message (format: "Name, Surname, email@example.com")
            try:
                email = welcome_msg.split(",")[-1].strip().lower()
            except IndexError:
                continue

            if email in confirmed_emails:
                study_program = row["12. Study program"].strip()
                email_to_program[email] = study_program
                # Count the program
                program_counts[study_program] = program_counts.get(study_program, 0) + 1

    # Write output CSV
    with output_path.open("w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["email", "study_program"])
        for email in sorted(email_to_program.keys()):
            writer.writerow([email, email_to_program[email]])

    # Print summary
    print(f"Processed {len(confirmed_emails)} confirmed participants")
    print(f"Found study programs for {len(email_to_program)} participants")
    if len(confirmed_emails) != len(email_to_program):
        print(f"Warning: Could not find study programs for {len(confirmed_emails) - len(email_to_program)} participants")
        missing_emails = confirmed_emails - set(email_to_program.keys())
        print("Missing emails:")
        for email in sorted(missing_emails):
            print(f"  - {email}")
    
    # Print program distribution table
    print("\nStudy program distribution:")
    for program, count in sorted(program_counts.items(), key=lambda x: (-x[1], x[0])):
        print(f"{program}: {count}")
    # Handle empty program string
    empty_count = program_counts.get("", 0)
    if empty_count > 0:
        print(f"No study program available: {empty_count}")


def parse_args():
    parser = argparse.ArgumentParser(
        description="Extract study programs for confirmed participants from application data"
    )
    parser.add_argument(
        "confirmed_emails",
        type=Path,
        help="Path to CSV file with confirmed participant emails",
    )
    parser.add_argument(
        "applications",
        type=Path,
        help="Path to the original application CSV file from Formbricks",
    )
    parser.add_argument(
        "-o",
        "--output",
        type=Path,
        help="Path to save the output CSV with email and study program",
        default="study_programs.csv"
    )
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    try:
        extract_study_programs(args.confirmed_emails, args.applications, args.output)
        print(f"Study programs saved to: {args.output}")
    except FileNotFoundError as e:
        sys.exit(f"File not found: {e}")
    except Exception as exc:
        sys.exit(f"Error: {exc}") 